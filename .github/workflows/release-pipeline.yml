name: Release Pipeline

on:
  push:
    branches: [develop, main]
    paths-ignore: ['ci/**']
  pull_request:
    branches: [develop]
    paths-ignore: ['ci/**']
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: false
        type: choice
        options:
          - patch
          - minor
          - major
        default: 'patch'
env:
  KIT_NAME: ${{ vars.kit.name }}

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  build-kit:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: ${{ vars.build.fetch_depth }}
          
      - id: version
        uses: ./.github/actions/version-manager
        with:
          bump_type: ${{ inputs.version_bump || vars.build.default_version_bump }}
          
      - name: Push version change
        run: |
          git push origin HEAD
          git tag "v${{ steps.version.outputs.new_version }}"
          git push origin "v${{ steps.version.outputs.new_version }}"
          
      - name: Build Kit
        env:
          GENESIS_SECRETS_BASE: ${{ secrets.SECRETS_BASE }}
          GENESIS_SECRETS_TOKEN: ${{ secrets.SECRETS_TOKEN }}
          GENESIS_SECRETS_KEY: ${{ secrets.SECRETS_KEY }}
          BOSH_CLIENT: ${{ secrets.BOSH_CLIENT }}
          BOSH_CLIENT_SECRET: ${{ secrets.BOSH_CLIENT_SECRET }}
          BOSH_ENVIRONMENT: ${{ secrets.BOSH_ENVIRONMENT }}
          BOSH_CA_CERT: ${{ secrets.BOSH_CA_CERT }}
        run: |
          sudo chmod -R a+rwx ./*
          ./ci/scripts/ensure-tools.sh
          VERSION="${{ steps.version.outputs.new_version }}"
          genesis compile-kit --force -v "$VERSION" -n "${{ vars.kit.name }}"
          
      - uses: actions/upload-artifact@v4
        with:
          name: kit-build
          path: ${{ vars.kit.name }}-${{ steps.version.outputs.new_version }}.tar.gz

  spec-tests:
    needs: [build-kit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: kit-build
          
      - name: Run Spec Tests
        env:
          GENESIS_SECRETS_BASE: ${{ secrets.SECRETS_BASE }}
          GENESIS_SECRETS_TOKEN: ${{ secrets.SECRETS_TOKEN }}
          GENESIS_SECRETS_KEY: ${{ secrets.SECRETS_KEY }}
        run: |
          sudo chmod -R a+rwx ./*
          ./ci/scripts/ensure-tools.sh

          sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go${{ vars.tools.go.version }}.${{ vars.tools.go.platform }}.tar.gz
          go install github.com/onsi/ginkgo/v2/ginkgo@latest
          export PATH=$PATH:~/go/bin
          
          cd ${{ vars.test.spec.directory }}
          ${{ vars.test.spec.runner }} ${{ vars.test.spec.parallel == true && '-p' || '' }} .

  spec-check:
    needs: [build-kit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: ${{ vars.build.fetch_depth }}
          
      - name: Get latest release tag
        id: latest_tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "tag=$latest_tag" >> $GITHUB_OUTPUT
          
      - uses: actions/download-artifact@v4
        with:
          name: kit-build
          
      - name: Check Specs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PREVIOUS_TAG: ${{ steps.latest_tag.outputs.tag }}
        run: |
          sudo chmod -R a+rwx ./*
          ./ci/scripts/ensure-tools.sh

          sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go${{ vars.tools.go.version }}.${{ vars.tools.go.platform }}.tar.gz
          go install github.com/onsi/ginkgo/v2/ginkgo@latest
          export PATH=$PATH:~/go/bin

          mkdir -p ${{ vars.test.spec.results_dir }}
          
          if [[ -n "$PREVIOUS_TAG" ]]; then
            git checkout $PREVIOUS_TAG
            cp -r ${{ vars.test.spec.directory }}/results ./${{ vars.test.spec.results_dir }}/old-specs
            git checkout -
          fi
          
          cd ${{ vars.test.spec.directory }}
          ${{ vars.test.spec.runner }} ${{ vars.test.spec.parallel == true && '-p' || '' }} .
          cd ..
          
          results_file="${GITHUB_WORKSPACE}/${{ vars.test.spec.results_dir }}/${{ vars.test.spec.diff_prefix }}$(date -u +%Y%m%d%H%M%S)"

          echo "Results of spec comparison" > "$results_file"
          
          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "Comparing specs with previous release $PREVIOUS_TAG..."
            bash -x ./ci/scripts/compare-release-specs.sh "$PREVIOUS_TAG" > "$results_file"
            
            if ! grep -q "No Spec Changes to Consider" "$results_file"; then
              echo "::warning ::Detected spec changes that may impact users"
            fi
          else
            echo "Initial release - no spec changes to compare" > "$results_file"
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: spec-diffs
          path: |
            ${{ vars.test.spec.results_dir }}/${{ vars.test.spec.diff_prefix }}*
            ${{ vars.test.spec.results_dir }}/*.html

  deploy:
    needs: [spec-tests, spec-check]
    runs-on: ubuntu-latest
    environment: ci-testing
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: kit-build
          
      - name: Set up Infrastructure
        uses: ./.github/actions/setup-infra
        with:
          iaas: ${{ vars.infra.default_iaas }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          gcp_service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          vsphere_username: ${{ secrets.VSPHERE_USERNAME }}
          vsphere_password: ${{ secrets.VSPHERE_PASSWORD }}
          
      - name: Deploy and Test
        env:
          DEPLOY_ENV: ${{ vars.environments.ci-testing.deploy_env }}
          CI_ROOT: ${{ vars.environments.ci-testing.ci_root }}
          GITHUB_WORKSPACE: ${{ vars.environments.ci-testing.github_workspace }}
          GENESIS_SECRETS_BASE: ${{ secrets.SECRETS_BASE }}
          GENESIS_SECRETS_TOKEN: ${{ secrets.SECRETS_TOKEN }}
          GENESIS_SECRETS_KEY: ${{ secrets.SECRETS_KEY }}
          BOSH_CLIENT: ${{ secrets.BOSH_CLIENT }}
          BOSH_CLIENT_SECRET: ${{ secrets.BOSH_CLIENT_SECRET }}
          BOSH_ENVIRONMENT: ${{ secrets.BOSH_ENVIRONMENT }}
          BOSH_CA_CERT: ${{ secrets.BOSH_CA_CERT }}
          SECRETS_SEED_DATA: ${{ secrets.SECRETS_SEED_DATA }}
        run: |
          sudo chmod -R a+rwx ./**
          ./ci/scripts/ensure-tools.sh
          ./ci/scripts/test-deployment.sh

  prepare-release:
    if: github.ref == 'refs/heads/develop' && github.event_name != 'pull_request'
    needs: [deploy, build-kit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: spec-diffs
          
      - name: Generate Release Notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./ci/scripts/generate-release-notes.sh \
            "${{ needs.build-kit.outputs.version }}" \
            "${{ github.workspace }}/previous-tag" \
            "release-notes.md"
            
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: release/${{ needs.build-kit.outputs.version }}
          title: ${{ vars.release.pr_title_prefix }}${{ needs.build-kit.outputs.version }}
          body: |
            Release preparation for version ${{ needs.build-kit.outputs.version }}
            
            Generated release notes and spec diffs attached.
          labels: ${{ vars.release.labels }}
          base: ${{ vars.release.base_branch }}

  release:
    if: github.ref == 'refs/heads/main'
    needs: [deploy, build-kit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: kit-build
          
      - name: Download Spec Diffs
        uses: actions/download-artifact@v4
        with:
          name: spec-diffs
          path: spec-diffs
          
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build-kit.outputs.version }}
          name: v${{ needs.build-kit.outputs.version }}
          body_path: release-notes/release-notes.md
          files: |
            *.tar.gz
            spec-diffs/*
          prerelease: false
          
      - name: Notify Success
        if: success()
        uses: ./.github/actions/notify
        with:
          message: "Successfully released v${{ needs.build-kit.outputs.version }}"
          status: success